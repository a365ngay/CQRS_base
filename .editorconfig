# EditorConfig is awesome: https://EditorConfig.org
# Docs: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options

# top-most EditorConfig file
root = true

[*]
indent_size = 4
indent_style = space
charset = utf-8
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true
max_line_length = 180
guidelines = 180

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# CSS files
[*.{css,scss}]
indent_size = 2

# JS files
[*.js]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
indent_size = 2
end_of_line = lf

# Dotnet code style settings:
[*.{cs,vb}]
# File header preferences
file_header_template = Copyright (c) Atlantic. All rights reserved.

# Organize using directives
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Namespace preferences
dotnet_style_namespace_match_folder = true

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:refactoring
dotnet_style_qualification_for_property = false:refactoring
dotnet_style_qualification_for_method = false:refactoring
dotnet_style_qualification_for_event = false:refactoring

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Classes, Structs, Enums, Properties, Methods, Local Functions, Events, Namespaces are PascalCase
dotnet_naming_rule.class_naming.symbols = class_symbol
dotnet_naming_rule.class_naming.style = pascal_case_style
dotnet_naming_rule.class_naming.severity = suggestion
dotnet_naming_symbols.class_symbol.applicable_kinds = class, struct, enum, property, method, local_function, event, namespace, delegate
dotnet_naming_symbols.class_symbol.applicable_accessibilities = *

# Interfaces are PascalCase
dotnet_naming_rule.interface_naming.symbols = interface_symbol
dotnet_naming_rule.interface_naming.style = interface_style
dotnet_naming_rule.interface_naming.severity = suggestion
dotnet_naming_symbols.interface_symbol.applicable_kinds = interface
dotnet_naming_symbols.interface_symbol.applicable_accessibilities = *

# Public fields are PascalCase
dotnet_naming_rule.public_field_naming.symbols = public_field_symbol
dotnet_naming_rule.public_field_naming.style = pascal_case_style
dotnet_naming_rule.public_field_naming.severity = suggestion
dotnet_naming_symbols.public_field_symbol.applicable_kinds = field
dotnet_naming_symbols.public_field_symbol.applicable_accessibilities = public, internal, protected, protected_internal, private_protected

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style
dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected internal, private protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static
dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style
dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected internal, private protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly
dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style
dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = s_

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const
dotnet_naming_style.constant_style.capitalization = pascal_case

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style
dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style
dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local
dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style
dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.all_members.applicable_kinds = *
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Parameters are camelCase
dotnet_naming_rule.parameter_naming.symbols = parameter_symbol
dotnet_naming_rule.parameter_naming.style = camel_case_style
dotnet_naming_rule.parameter_naming.severity = suggestion
dotnet_naming_symbols.parameter_symbol.applicable_kinds = parameter
dotnet_naming_symbols.parameter_symbol.applicable_accessibilities = *

# Everything else are camelCase
dotnet_naming_rule.everything_else_naming.symbols = everything_else
dotnet_naming_rule.everything_else_naming.style = camel_case_style
dotnet_naming_rule.everything_else_naming.severity = suggestion
dotnet_naming_symbols.everything_else.applicable_kinds = local
dotnet_naming_symbols.everything_else.applicable_accessibilities = *

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members
dotnet_style_readonly_field = true

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = false
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:warning

# Null-checking preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Unnecessary code rules
dotnet_code_quality_unused_parameters = all
dotnet_remove_unnecessary_suppression_exclusions = none

# CSharp code style settings:
[*.cs]
# Using directive preferences
csharp_using_directive_placement = inside_namespace

# Namespace preferences
csharp_style_namespace_declarations = block_scoped:warning

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,const,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
csharp_prefer_static_local_function = true:suggestion

# Newline preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_braces = false
csharp_indent_block_contents = true
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Spacing preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_before_comma = false
csharp_space_after_comma = true
csharp_space_before_dot = false
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_square_brackets = false
csharp_space_between_empty_square_brackets = false

# Wrap preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Code block preferences
csharp_prefer_braces = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_lambdas = true

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion

# Expression-level preferences
csharp_style_inlined_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# Null-checking preference
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Unnecessary code rules
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# CA1000: Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = none

# CA1001: Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = warning

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = warning

# CA1003: Use generic event handler instances
dotnet_diagnostic.CA1003.severity = warning

# CA1005: Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = warning

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = none

# CA1010: Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = warning

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1014: Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = none

# CA1016: Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = none

# CA1017: Mark assemblies with ComVisible
dotnet_diagnostic.CA1017.severity = none

# CA1018: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = warning

# CA1019: Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = warning

# CA1021: Avoid out parameters
dotnet_diagnostic.CA1021.severity = none

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = none

# CA1027: Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = warning

# CA1028: Enum Storage should be Int32
dotnet_diagnostic.CA1028.severity = warning

# CA1030: Use events where appropriate
dotnet_diagnostic.CA1030.severity = none

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = none

# CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = warning

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = warning

# CA1034: Nested types should not be visible
# dotnet_diagnostic.CA1034.severity = warning

# CA1036: Override methods on comparable types
dotnet_diagnostic.CA1036.severity = warning

# CA1040: Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = none

# CA1041: Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning

# CA1043: Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1043.severity = warning

# CA1044: Properties should not be write only
dotnet_diagnostic.CA1044.severity = warning

# CA1045: Do not pass types by reference
dotnet_diagnostic.CA1045.severity = none

# CA1046: Do not overload equality operator on reference types
dotnet_diagnostic.CA1046.severity = warning

# CA1047: Do not declare protected member in sealed type
dotnet_diagnostic.CA1047.severity = warning

# CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = warning

# CA1051: Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = warning

# CA1052: Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = warning

# CA1054: URI-like parameters should not be strings
dotnet_diagnostic.CA1054.severity = none

# CA1055: URI-like return values should not be strings
dotnet_diagnostic.CA1055.severity = none

# CA1056: URI-like properties should not be strings
dotnet_diagnostic.CA1056.severity = none

# CA1058: Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = warning

# CA1060: Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1060.severity = warning

# CA1061: Do not hide base class methods
dotnet_diagnostic.CA1061.severity = warning

# CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = warning

# CA1063: Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = warning

# CA1064: Exceptions should be public
dotnet_diagnostic.CA1064.severity = warning

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# CA1066: Implement IEquatable when overriding Object.Equals
dotnet_diagnostic.CA1066.severity = warning

# CA1067: Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1067.severity = warning

# CA1068: CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = warning

# CA1069: Enums values should not be duplicated
dotnet_diagnostic.CA1069.severity = warning

# CA1070: Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = suggestion

# CA1200: Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = warning

# CA1303: Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = none

# CA1304: Specify CultureInfo
dotnet_diagnostic.CA1304.severity = warning

# CA1305: Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning

# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = warning

# CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = none

# CA1309: Use ordinal string comparison
dotnet_diagnostic.CA1309.severity = warning

# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = warning

# CA1401: P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = warning

# CA1416: Validate platform compatibility
dotnet_diagnostic.CA1416.severity = none

# CA1417: Do not use 'OutAttribute' on string parameters for P/Invokes
dotnet_diagnostic.CA1417.severity = warning

# CA1418: Use valid platform string
dotnet_diagnostic.CA1418.severity = none

# CA1419: Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1419.severity = warning

# CA1501: Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning

# CA1502: Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = none

# CA1505: Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning

# CA1506: Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = none

# CA1507: Use nameof in place of string
dotnet_diagnostic.CA1507.severity = warning

# CA1508: Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = warning

# CA1509: Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1509.severity = none

# CA1700: Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = warning

# CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = warning
dotnet_code_quality.CA1707.api_surface = protected, internal, public

# CA1708: Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = warning

# CA1710: Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = none

# CA1711: Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = none

# CA1712: Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = warning

# CA1713: Events should not have 'Before' or 'After' prefix
dotnet_diagnostic.CA1713.severity = warning

# CA1714: Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = warning

# CA1715: Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = warning

# CA1716: Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = none

# CA1717: Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1717.severity = warning

# CA1720: Identifier contains type name
dotnet_diagnostic.CA1720.severity = none

# CA1721: Property names should not match get methods
dotnet_diagnostic.CA1721.severity = warning

# CA1724: Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = none

# CA1725: Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = warning

# CA1727: Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = suggestion

# CA1802: Use literals where appropriate
dotnet_diagnostic.CA1802.severity = warning

# CA1805: Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = warning

# CA1806: Do not ignore method results
dotnet_diagnostic.CA1806.severity = warning

# CA1810: Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = warning

# CA1812: Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = warning

# CA1813: Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = warning

# CA1814: Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = none

# CA1815: Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = warning

# CA1816: Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1816.severity = warning

# CA1819: Properties should not return arrays
dotnet_diagnostic.CA1819.severity = warning

# CA1820: Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = warning

# CA1821: Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = warning

# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = warning
dotnet_code_quality.CA1822.api_surface = private, internal

# CA1823: Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# CA1824: Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = warning

# CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = warning

# CA1826: Do not use Enumerable methods on indexable collections
dotnet_diagnostic.CA1826.severity = warning

# CA1827: Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = warning

# CA1828: Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1828.severity = warning

# CA1829: Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1829.severity = warning

# CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = warning

# CA1831: Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1831.severity = warning

# CA1832: Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1832.severity = warning

# CA1833: Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1833.severity = warning

# CA1834: Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = warning

# CA1835: Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1835.severity = warning

# CA1836: Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1836.severity = warning

# CA1837: Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1837.severity = warning

# CA1838: Avoid StringBuilder parameters for P/Invokes
dotnet_diagnostic.CA1838.severity = warning

# CA1839: Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1839.severity = warning

# CA1840: Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1840.severity = warning

# CA1841: Prefer Dictionary.Contains methods
dotnet_diagnostic.CA1841.severity = warning

# CA1842: Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = warning

# CA1843: Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = warning

# CA1844: Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1844.severity = warning

# CA1845: Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = warning

# CA1846: Prefer AsSpan over Substring
dotnet_diagnostic.CA1846.severity = warning

# CA1847: Use string.Contains(char) instead of string.Contains(string) with single characters
dotnet_diagnostic.CA1847.severity = warning

# CA1848: Use the LoggerMessage delegates
dotnet_diagnostic.CA1848.severity = warning

# CA1849: Call async methods when in an async method
dotnet_diagnostic.CA1849.severity = warning

# CA1850: Prefer static HashData method over ComputeHash
dotnet_diagnostic.CA1850.severity = warning

# CA2000: Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = warning

# CA2002: Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = warning

# CA2007: Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = none

# CA2008: Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = warning

# CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = warning

# CA2011: Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = warning

# CA2012: Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = warning

# CA2013: Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = warning

# CA2014: Do not use stackalloc in loops
dotnet_diagnostic.CA2014.severity = warning

# CA2015: Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2015.severity = warning

# CA2016: Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2016.severity = warning

# CA2017: Parameter count mismatch
dotnet_diagnostic.CA2017.severity = warning

# CA2018: 'Buffer.BlockCopy' expects the number of bytes to be copied for the 'count' argument
dotnet_diagnostic.CA2018.severity = error

# CA2100: Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = warning

# CA2101: Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = warning

# CA2109: Review visible event handlers
dotnet_diagnostic.CA2109.severity = warning

# CA2119: Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = none

# CA2153: Do Not Catch Corrupted State Exceptions
dotnet_diagnostic.CA2153.severity = none

# CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# CA2201: Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = none

# CA2207: Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = warning

# CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning

# CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning

# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning

# CA2215: Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = warning

# CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = none

# CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = warning

# CA2218: Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2218.severity = warning

# CA2219: Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2219.severity = warning

# CA2224: Override Equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = warning

# CA2225: Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = none

# CA2226: Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = warning

# CA2227: Collection properties should be read only
dotnet_diagnostic.CA2227.severity = none

# CA2229: Implement serialization constructors
dotnet_diagnostic.CA2229.severity = warning

# CA2231: Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2231.severity = warning

# CA2234: Pass system uri objects instead of strings
dotnet_diagnostic.CA2234.severity = none

# CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = warning

# CA2237: Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = warning

# CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning

# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = warning

# CA2243: Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = warning

# CA2244: Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = warning

# CA2245: Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = warning

# CA2246: Assigning symbol and its member in the same statement
dotnet_diagnostic.CA2246.severity = warning

# CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2247.severity = warning

# CA2248: Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2248.severity = warning

# CA2249: Consider using 'string.Contains' instead of 'string.IndexOf'
dotnet_diagnostic.CA2249.severity = warning

# CA2250: Use 'ThrowIfCancellationRequested'
dotnet_diagnostic.CA2250.severity = warning

# CA2251: Use String.Equals over String.Compare
dotnet_diagnostic.CA2251.severity = warning

# CA2252: This API requires opting into preview features
dotnet_diagnostic.CA2252.severity = error

# CA2253: Named placeholders should not be numeric values
dotnet_diagnostic.CA2253.severity = warning

# CA2254: Template should be a static expression
dotnet_diagnostic.CA2254.severity = warning

# CA2255: The 'ModuleInitializer' attribute should not be used in libraries
dotnet_diagnostic.CA2255.severity = warning

# CA2256: All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2256.severity = warning

# CA2257: Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2257.severity = warning

# CA2258: Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
dotnet_diagnostic.CA2258.severity = warning

# CA2300: Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = warning

# CA2301: Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = warning

# CA2302: Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = warning

# CA2305: Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2305.severity = warning

# CA2310: Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2310.severity = warning

# CA2311: Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2311.severity = warning

# CA2312: Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2312.severity = warning

# CA2315: Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2315.severity = warning

# CA2321: Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2321.severity = warning

# CA2322: Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2322.severity = warning

# CA2326: Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2326.severity = warning

# CA2327: Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2327.severity = warning

# CA2328: Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2328.severity = warning

# CA2329: Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2329.severity = warning

# CA2330: Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2330.severity = warning

# CA2350: Do not use DataTable.ReadXml() with untrusted data
dotnet_diagnostic.CA2350.severity = warning

# CA2351: Do not use DataSet.ReadXml() with untrusted data
dotnet_diagnostic.CA2351.severity = warning

# CA2352: Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2352.severity = warning

# CA2353: Unsafe DataSet or DataTable in serializable type
dotnet_diagnostic.CA2353.severity = warning

# CA2354: Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2354.severity = warning

# CA2355: Unsafe DataSet or DataTable type found in deserializable object graph
dotnet_diagnostic.CA2355.severity = warning

# CA2356: Unsafe DataSet or DataTable type in web deserializable object graph
dotnet_diagnostic.CA2356.severity = warning

# CA2361: Ensure auto-generated class containing DataSet.ReadXml() is not used with untrusted data
dotnet_diagnostic.CA2361.severity = warning

# CA2362: Unsafe DataSet or DataTable in auto-generated serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2362.severity = warning

# CA3001: Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = warning

# CA3002: Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = warning

# CA3003: Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = warning

# CA3004: Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = warning

# CA3005: Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = warning

# CA3006: Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = warning

# CA3007: Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = warning

# CA3008: Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = warning

# CA3009: Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = warning

# CA3010: Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = warning

# CA3011: Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = warning

# CA3012: Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = warning

# CA3061: Do Not Add Schema By URL
dotnet_diagnostic.CA3061.severity = warning

# CA3075: Insecure DTD processing in XML
dotnet_diagnostic.CA3075.severity = warning

# CA3076: Insecure XSLT script processing.
dotnet_diagnostic.CA3076.severity = warning

# CA3077: Insecure Processing in API Design, XmlDocument and XmlTextReader
dotnet_diagnostic.CA3077.severity = warning

# CA3147: Mark Verb Handlers With Validate Antiforgery Token
dotnet_diagnostic.CA3147.severity = warning

# CA5350: Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5350.severity = warning

# CA5351: Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = warning

# CA5358: Review cipher mode usage with cryptography experts
dotnet_diagnostic.CA5358.severity = warning

# CA5359: Do Not Disable Certificate Validation
dotnet_diagnostic.CA5359.severity = warning

# CA5360: Do Not Call Dangerous Methods In Deserialization
dotnet_diagnostic.CA5360.severity = warning

# CA5361: Do Not Disable SChannel Use of Strong Crypto
dotnet_diagnostic.CA5361.severity = warning

# CA5362: Potential reference cycle in deserialized object graph
dotnet_diagnostic.CA5362.severity = warning

# CA5363: Do Not Disable Request Validation
dotnet_diagnostic.CA5363.severity = warning

# CA5364: Do Not Use Deprecated Security Protocols
dotnet_diagnostic.CA5364.severity = warning

# CA5365: Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5365.severity = warning

# CA5366: Use XmlReader for 'DataSet.ReadXml()'
dotnet_diagnostic.CA5366.severity = warning

# CA5367: Do Not Serialize Types With Pointer Fields
dotnet_diagnostic.CA5367.severity = warning

# CA5368: Set ViewStateUserKey For Classes Derived From Page
dotnet_diagnostic.CA5368.severity = warning

# CA5369: Use XmlReader for 'XmlSerializer.Deserialize()'
dotnet_diagnostic.CA5369.severity = warning

# CA5370: Use XmlReader for XmlValidatingReader constructor
dotnet_diagnostic.CA5370.severity = warning

# CA5371: Use XmlReader for 'XmlSchema.Read()'
dotnet_diagnostic.CA5371.severity = warning

# CA5372: Use XmlReader for XPathDocument constructor
dotnet_diagnostic.CA5372.severity = warning

# CA5373: Do not use obsolete key derivation function
dotnet_diagnostic.CA5373.severity = warning

# CA5374: Do Not Use XslTransform
dotnet_diagnostic.CA5374.severity = warning

# CA5375: Do Not Use Account Shared Access Signature
dotnet_diagnostic.CA5375.severity = warning

# CA5376: Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5376.severity = warning

# CA5377: Use Container Level Access Policy
dotnet_diagnostic.CA5377.severity = warning

# CA5378: Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5378.severity = warning

# CA5379: Ensure Key Derivation Function algorithm is sufficiently strong
dotnet_diagnostic.CA5379.severity = warning

# CA5380: Do Not Add Certificates To Root Store
dotnet_diagnostic.CA5380.severity = warning

# CA5381: Ensure Certificates Are Not Added To Root Store
dotnet_diagnostic.CA5381.severity = warning

# CA5382: Use Secure Cookies In ASP.NET Core
dotnet_diagnostic.CA5382.severity = warning

# CA5383: Ensure Use Secure Cookies In ASP.NET Core
dotnet_diagnostic.CA5383.severity = warning

# CA5384: Do Not Use Digital Signature Algorithm (DSA)
dotnet_diagnostic.CA5384.severity = warning

# CA5385: Use Rivest-Shamir-Adleman (RSA) algorithm with sufficient key size
dotnet_diagnostic.CA5385.severity = warning

# CA5386: Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = warning

# CA5387: Do Not Use Weak Key Derivation Function With Insufficient Iteration Count
dotnet_diagnostic.CA5387.severity = warning

# CA5388: Ensure Sufficient Iteration Count When Using Weak Key Derivation Function
dotnet_diagnostic.CA5388.severity = warning

# CA5389: Do Not Add Archive Item's Path To The Target File System Path
dotnet_diagnostic.CA5389.severity = warning

# CA5390: Do not hard-code encryption key
dotnet_diagnostic.CA5390.severity = warning

# CA5391: Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5391.severity = suggestion

# CA5392: Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5392.severity = warning

# CA5393: Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5393.severity = warning

# CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = suggestion

# CA5395: Miss HttpVerb attribute for action methods
dotnet_diagnostic.CA5395.severity = warning

# CA5396: Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5396.severity = suggestion

# CA5397: Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5397.severity = warning

# CA5398: Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5398.severity = warning

# CA5399: HttpClients should enable certificate revocation list checks
dotnet_diagnostic.CA5399.severity = warning

# CA5400: Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5400.severity = warning

# CA5401: Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5401.severity = suggestion

# CA5402: Use CreateEncryptor with the default IV
dotnet_diagnostic.CA5402.severity = suggestion

# CA5403: Do not hard-code certificate
dotnet_diagnostic.CA5403.severity = warning

# CA5404: Do not disable token validation checks
dotnet_diagnostic.CA5404.severity = warning

# CA5405: Do not always skip token validation in delegates
dotnet_diagnostic.CA5405.severity = warning

# IDE0001: Simplify name
dotnet_diagnostic.IDE0001.severity = warning

# IDE0002: Simplify member access
dotnet_diagnostic.IDE0002.severity = warning

# IDE0003: Remove this or Me qualification
dotnet_diagnostic.IDE0003.severity = warning

# IDE0004: Remove Unnecessary Cast
dotnet_diagnostic.IDE0004.severity = warning

# IDE0005: Remove unnecessary import
dotnet_diagnostic.IDE0005.severity = warning

# IDE0007: Use implicit type
dotnet_diagnostic.IDE0007.severity = suggestion

# IDE0008: Use explicit type
dotnet_diagnostic.IDE0008.severity = none

# IDE0009: Add this or Me qualification
dotnet_diagnostic.IDE0009.severity = none

# IDE0010: Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = suggestion

# IDE0011: Add braces
dotnet_diagnostic.IDE0011.severity = warning

# IDE0016: Use 'throw' expression
dotnet_diagnostic.IDE0016.severity = warning

# IDE0017: Simplify object initialization
dotnet_diagnostic.IDE0017.severity = suggestion

# IDE0018: Inline variable declaration
dotnet_diagnostic.IDE0018.severity = suggestion

# IDE0019: Use pattern matching to avoid as followed by a null check
dotnet_diagnostic.IDE0019.severity = suggestion

# IDE0020: Use pattern matching to avoid is check followed by a cast (with variable)
dotnet_diagnostic.IDE0020.severity = warning

# IDE0021: Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = none

# IDE0022: Use expression body for methods
dotnet_diagnostic.IDE0022.severity = none

# IDE0023: Use expression body for conversion operators
dotnet_diagnostic.IDE0023.severity = none

# IDE0024: Use expression body for operators
dotnet_diagnostic.IDE0024.severity = none

# IDE0025: Use expression body for properties
dotnet_diagnostic.IDE0025.severity = suggestion

# IDE0026: Use expression body for indexers
dotnet_diagnostic.IDE0026.severity = suggestion

# IDE0027: Use expression body for accessors
dotnet_diagnostic.IDE0027.severity = suggestion

# IDE0028: Simplify collection initialization
dotnet_diagnostic.IDE0028.severity = suggestion

# IDE0029: Use coalesce expression
dotnet_diagnostic.IDE0029.severity = suggestion

# IDE0030: Use coalesce expression
dotnet_diagnostic.IDE0030.severity = suggestion

# IDE0031: Use null propagation
dotnet_diagnostic.IDE0031.severity = suggestion

# IDE0032: Use auto property
dotnet_diagnostic.IDE0032.severity = warning

# IDE0033: Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = suggestion

# IDE0034: Simplify 'default' expression
dotnet_diagnostic.IDE0034.severity = suggestion

# IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0035.severity = warning

# IDE0036: Order modifiers
dotnet_diagnostic.IDE0036.severity = suggestion

# IDE0037: Use inferred member name
dotnet_diagnostic.IDE0037.severity = none

# IDE0038: Use pattern matching to avoid is check followed by a cast (without variable)
dotnet_diagnostic.IDE0038.severity = warning

# IDE0039: Use local function instead of lambda
dotnet_diagnostic.IDE0039.severity = suggestion

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = suggestion

# IDE0041: Use 'is null' check
dotnet_diagnostic.IDE0041.severity = warning

# IDE0042: Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = suggestion

# IDE0043: Invalid format string
dotnet_diagnostic.IDE0043.severity = warning

# IDE0044: Add readonly modifier
dotnet_diagnostic.IDE0044.severity = suggestion

# IDE0045: Use conditional expression for assignment
dotnet_diagnostic.IDE0045.severity = suggestion

# IDE0046: Use conditional expression for return
dotnet_diagnostic.IDE0046.severity = none

# IDE0047: Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = none

# IDE0048: Add parentheses for clarity
dotnet_diagnostic.IDE0048.severity = suggestion

# IDE0049: Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0049.severity = warning

# IDE0050: Convert anonymous type to tuple
dotnet_diagnostic.IDE0050.severity = suggestion

# IDE0051: Remove unused private members
dotnet_diagnostic.IDE0051.severity = warning

# IDE0052: Remove unread private members
dotnet_diagnostic.IDE0052.severity = warning

# IDE0053: Use expression body for lambdas
dotnet_diagnostic.IDE0053.severity = suggestion

# IDE0054: Use compound assignment
dotnet_diagnostic.IDE0054.severity = suggestion

# IDE0055: Fix formatting
dotnet_diagnostic.IDE0055.severity = warning

# IDE0056: Use index operator
dotnet_diagnostic.IDE0056.severity = suggestion

# IDE0057: Use range operator
dotnet_diagnostic.IDE0057.severity = suggestion

# IDE0058: Expression value is never used
dotnet_diagnostic.IDE0058.severity = none

# IDE0059: Unnecessary assignment of a value
dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# IDE0061: Use expression body for local functions
dotnet_diagnostic.IDE0061.severity = none

# IDE0062: Make local function 'static'
dotnet_diagnostic.IDE0062.severity = warning

# IDE0063: Use simple 'using' statement
dotnet_diagnostic.IDE0063.severity = suggestion

# IDE0064: Make readonly fields writable
dotnet_diagnostic.IDE0064.severity = none

# IDE0065: Misplaced using directive
dotnet_diagnostic.IDE0065.severity = none

# IDE0066: Convert switch statement to expression
dotnet_diagnostic.IDE0066.severity = suggestion

# IDE0070: Use 'System.HashCode.Combine'
dotnet_diagnostic.IDE0070.severity = warning

# IDE0071: Simplify interpolation
dotnet_diagnostic.IDE0071.severity = warning

# IDE0072: Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = suggestion

# IDE0073: The file header is missing or not located at the top of the file
dotnet_diagnostic.IDE0073.severity = warning

# IDE0074: Use coalesce compound assignment
dotnet_diagnostic.IDE0074.severity = suggestion

# IDE0075: Simplify conditional expression
dotnet_diagnostic.IDE0075.severity = warning

# IDE0076: Invalid global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0076.severity = warning

# IDE0077: Avoid legacy format target in 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0077.severity = warning

# IDE0078: Use pattern matching
dotnet_diagnostic.IDE0078.severity = suggestion

# IDE0079: Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity = warning

# IDE0080: Remove unnecessary suppression operator
dotnet_diagnostic.IDE0080.severity = warning

# IDE0081: Remove unnecessary suppression operator
dotnet_diagnostic.IDE0081.severity = warning

# IDE0082: 'typeof' can be converted  to 'nameof'
dotnet_diagnostic.IDE0082.severity = warning

# IDE0083: Use pattern matching
dotnet_diagnostic.IDE0083.severity = suggestion

# IDE0084: Use pattern matching (IsNot operator)
dotnet_diagnostic.IDE0084.severity = suggestion

# IDE0090: Simplify new expression
dotnet_diagnostic.IDE0090.severity = none

# IDE0100: Remove unnecessary equality operator
dotnet_diagnostic.IDE0100.severity = warning

# IDE0110: Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = warning

# IDE0120: Simplify LINQ expression
dotnet_diagnostic.IDE0120.severity = suggestion

# IDE0130: Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = warning

# IDE0140: Simplify object creation
dotnet_diagnostic.IDE0140.severity = suggestion

# IDE0150: Prefer 'null' check over type check
dotnet_diagnostic.IDE0150.severity = warning

# IDE0160: Convert to block scoped namespace
dotnet_diagnostic.IDE0160.severity = warning

# IDE0161: Convert to file-scoped namespace
dotnet_diagnostic.IDE0161.severity = none

# IDE1005: Delegate invocation can be simplified.
dotnet_diagnostic.IDE1005.severity = suggestion

# IDE1006: Code-style naming rules
dotnet_diagnostic.IDE1006.severity = warning

# IDE2000: Allow multiple blank lines
dotnet_diagnostic.IDE2000.severity = none

# IDE2001: Embedded statements must be on their own line
dotnet_diagnostic.IDE2001.severity = warning

# IDE2002: Consecutive braces must not have blank line between them
dotnet_diagnostic.IDE2002.severity = warning

# IDE2003: Allow statement immediately after block
dotnet_diagnostic.IDE2003.severity = none

# IDE2004: Blank line not allowed after constructor initializer colon
dotnet_diagnostic.IDE2004.severity = warning

# SA0001: XML comments
dotnet_diagnostic.SA0001.severity = none

# SA1000: Keywords must be spaced correctly
dotnet_diagnostic.SA1000.severity = warning

# SA1001: Commas should not be preceded by whitespace
dotnet_diagnostic.SA1001.severity = warning

# SA1002: Semicolons should not be preceded by a space
dotnet_diagnostic.SA1002.severity = warning

# SA1003: Operator should not appear at the end of a line
dotnet_diagnostic.SA1003.severity = warning

# SA1004: Documentation line should begin with a space
dotnet_diagnostic.SA1004.severity = warning

# SA1005: Single line comment should begin with a space
dotnet_diagnostic.SA1005.severity = warning

# SA1008: Opening parenthesis should not be preceded by a space
dotnet_diagnostic.SA1008.severity = warning

# SA1009: Closing parenthesis should not be followed by a space
dotnet_diagnostic.SA1009.severity = warning

# SA1010: Opening square brackets should not be preceded by a space
dotnet_diagnostic.SA1010.severity = warning

# SA1011: Closing square bracket should be followed by a space
dotnet_diagnostic.SA1011.severity = warning

# SA1012: Opening brace should be followed by a space
dotnet_diagnostic.SA1012.severity = warning

# SA1013: Closing brace should be preceded by a space
dotnet_diagnostic.SA1013.severity = warning

# SA1014: Opening generic brackets should not be preceded by a space
dotnet_diagnostic.SA1014.severity = warning

# SA1015: Closing generic bracket should not be followed by a space
dotnet_diagnostic.SA1015.severity = warning

# SA1018: Nullable type symbol should not be preceded by a space
dotnet_diagnostic.SA1018.severity = warning

# SA1020: Increment symbol should not be preceded by a space
dotnet_diagnostic.SA1020.severity = warning

# SA1021: Negative sign should be preceded by a space
dotnet_diagnostic.SA1021.severity = warning

# SA1023: Dereference symbol '*' should not be preceded by a space."
dotnet_diagnostic.SA1023.severity = warning

# SA1024: Colon should be followed by a space
dotnet_diagnostic.SA1024.severity = warning

# SA1025: Code should not contain multiple whitespace characters in a row
dotnet_diagnostic.SA1025.severity = warning

# SA1026: Keyword followed by span or blank line
dotnet_diagnostic.SA1026.severity = warning

# SA1027: Tabs and spaces should be used correctly
dotnet_diagnostic.SA1027.severity = warning

# SA1028: Code should not contain trailing whitespace
dotnet_diagnostic.SA1028.severity = warning

# SA1100: Do not prefix calls with base unless local implementation exists
dotnet_diagnostic.SA1100.severity = warning

# SA1101: Prefix local calls with this
dotnet_diagnostic.SA1101.severity = none

# SA1102: Query clause should follow previous clause
dotnet_diagnostic.SA1102.severity = warning

# SA1105: Query clauses spanning multiple lines should begin on own line
dotnet_diagnostic.SA1105.severity = warning

# SA1106: Code should not contain empty statements
dotnet_diagnostic.SA1106.severity = warning

# SA1107: Code should not contain multiple statements on one line
dotnet_diagnostic.SA1107.severity = warning

# SA1108: Block statements should not contain embedded comments
dotnet_diagnostic.SA1108.severity = warning

# SA1110: Opening parenthesis or bracket should be on declaration line
dotnet_diagnostic.SA1110.severity = warning

# SA1111: Closing parenthesis should be on line of last parameter
dotnet_diagnostic.SA1111.severity = warning

# SA1113: Comma should be on the same line as previous parameter
dotnet_diagnostic.SA1113.severity = warning

# SA1114: Parameter list should follow declaration
dotnet_diagnostic.SA1114.severity = warning

# SA1115: Parameter should begin on the line after the previous parameter
dotnet_diagnostic.SA1115.severity = warning

# SA1116: Split parameters should start on line after declaration
dotnet_diagnostic.SA1116.severity = warning

# SA1117: Parameters should be on same line or separate lines
dotnet_diagnostic.SA1117.severity = warning

# SA1118: Parameter should not span multiple lines
dotnet_diagnostic.SA1118.severity = warning

# SA1119: Statement should not use unnecessary parenthesis
dotnet_diagnostic.SA1119.severity = warning

# SA1120: Comments should contain text
dotnet_diagnostic.SA1120.severity = warning

# SA1121: Use built-in type alias
dotnet_diagnostic.SA1121.severity = warning

# SA1122: Use string.Empty for empty strings
dotnet_diagnostic.SA1122.severity = warning

# SA1123: Region should not be located within a code element
dotnet_diagnostic.SA1123.severity = warning

# SA1124: Do not use regions
dotnet_diagnostic.SA1124.severity = warning

# SA1125: Use shorthand for nullable types
dotnet_diagnostic.SA1125.severity = warning

# SA1127: Generic type constraints should be on their own line
dotnet_diagnostic.SA1127.severity = warning

# SA1128: Put constructor initializers on their own line
dotnet_diagnostic.SA1128.severity = warning

# SA1129: Do not use default value type constructor
dotnet_diagnostic.SA1129.severity = warning

# SA1130: Use lambda syntax
dotnet_diagnostic.SA1130.severity = warning

# SA1131: Constant values should appear on the right-hand side of comparisons
dotnet_diagnostic.SA1131.severity = warning

# SA1132: Do not combine fields
dotnet_diagnostic.SA1132.severity = warning

# SA1133: Do not combine attributes
dotnet_diagnostic.SA1133.severity = warning

# SA1134: Each attribute should be placed on its own line of code
dotnet_diagnostic.SA1134.severity = warning

# SA1135: Using directive should be qualified
dotnet_diagnostic.SA1135.severity = warning

# SA1136: Enum values should be on separate lines
dotnet_diagnostic.SA1136.severity = warning

# SA1137: Elements should have the same indentation
dotnet_diagnostic.SA1137.severity = warning

# SA1139: Use literal suffix notation instead of casting
dotnet_diagnostic.SA1139.severity = warning

# SA1141: Use tuple syntax
dotnet_diagnostic.SA1141.severity = warning

# SA1142: Refer to tuple elements by name
dotnet_diagnostic.SA1142.severity = warning

# SA1200: Using directive should appear within a namespace declaration
dotnet_diagnostic.SA1200.severity = warning

# SA1201: Elements should appear in the correct order
dotnet_diagnostic.SA1201.severity = none

# SA1202: Elements should be ordered by access
dotnet_diagnostic.SA1202.severity = warning

# SA1203: Constants should appear before fields
dotnet_diagnostic.SA1203.severity = warning

# SA1204: Static elements should appear before instance elements
dotnet_diagnostic.SA1204.severity = none

# SA1205: Partial elements should declare an access modifier
dotnet_diagnostic.SA1205.severity = warning

# SA1206: Keyword ordering
dotnet_diagnostic.SA1206.severity = warning

# SA1208: Using directive ordering
dotnet_diagnostic.SA1208.severity = warning

# SA1209: Using alias directives should be placed after all using namespace directives
dotnet_diagnostic.SA1209.severity = warning

# SA1210: Using directives should be ordered alphabetically by the namespaces
dotnet_diagnostic.SA1210.severity = warning

# SA1211: Using alias directive ordering
dotnet_diagnostic.SA1211.severity = warning

# SA1212: A get accessor appears after a set accessor within a property or indexer
dotnet_diagnostic.SA1212.severity = warning

# SA1214: Readonly fields should appear before non-readonly fields
dotnet_diagnostic.SA1214.severity = warning

# SA1216: Using static directives should be placed at the correct location
dotnet_diagnostic.SA1216.severity = warning

# SA1300: Element should begin with an uppercase letter
dotnet_diagnostic.SA1300.severity = warning

# SA1302: Interface names should begin with I
dotnet_diagnostic.SA1302.severity = warning

# SA1303: Const field names should begin with upper-case letter
dotnet_diagnostic.SA1303.severity = warning

# SA1304: Non-private readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1304.severity = warning

# SA1306: Field should begin with lower-case letter
dotnet_diagnostic.SA1306.severity = none

# SA1307: Field should begin with upper-case letter
dotnet_diagnostic.SA1307.severity = none

# SA1308: Field should not begin with the prefix 's_' or 'm_'
dotnet_diagnostic.SA1308.severity = none

# SA1309: Field names should not begin with underscore
dotnet_diagnostic.SA1309.severity = none

# SA1310: Field should not contain an underscore
dotnet_diagnostic.SA1310.severity = none

# SA1311: Static readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1311.severity = none

# SA1312: Variable should begin with lower-case letter
dotnet_diagnostic.SA1312.severity = warning

# SA1313: Parameter should begin with lower-case letter
dotnet_diagnostic.SA1313.severity = none

# SA1314: Type parameter names should begin with T
dotnet_diagnostic.SA1314.severity = warning

# SA1316: Tuple element names should use correct casing
dotnet_diagnostic.SA1316.severity = warning

# SA1400: Member should declare an access modifer
dotnet_diagnostic.SA1400.severity = warning

# SA1401: Fields should be private
dotnet_diagnostic.SA1401.severity = warning

# SA1402: File may only contain a single type
dotnet_diagnostic.SA1402.severity = warning

# SA1403: File may only contain a single namespace
dotnet_diagnostic.SA1403.severity = warning

# SA1404: Code analysis suppression should have justification
dotnet_diagnostic.SA1404.severity = warning

# SA1405: Debug.Assert should provide message text
dotnet_diagnostic.SA1405.severity = warning

# SA1407: Arithmetic expressions should declare precedence
dotnet_diagnostic.SA1407.severity = suggestion

# SA1408: Conditional expressions should declare precedence
dotnet_diagnostic.SA1408.severity = suggestion

# SA1410: Remove delegate parenthesis when possible
dotnet_diagnostic.SA1410.severity = warning

# SA1411: Attribute constructor shouldn't use unnecessary parenthesis
dotnet_diagnostic.SA1411.severity = warning

# SA1413: Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1413.severity = none

# SA1414: Tuple types in signatures should have element names
dotnet_diagnostic.SA1414.severity = warning

# SA1500: Braces for multi-line statements should not share line
dotnet_diagnostic.SA1500.severity = warning

# SA1501: Statement should not be on a single line
dotnet_diagnostic.SA1501.severity = warning

# SA1502: Element should not be on a single line
dotnet_diagnostic.SA1502.severity = warning

# SA1503: Braces should not be omitted
dotnet_diagnostic.SA1503.severity = warning

# SA1504: All accessors should be single-line or multi-line
dotnet_diagnostic.SA1504.severity = warning

# SA1505: An opening brace should not be followed by a blank line
dotnet_diagnostic.SA1505.severity = warning

# SA1506: Element documentation headers should not be followed by blank line
dotnet_diagnostic.SA1506.severity = warning

# SA1507: Code should not contain multiple blank lines in a row
dotnet_diagnostic.SA1507.severity = warning

# SA1508: A closing brace should not be preceded by a blank line
dotnet_diagnostic.SA1508.severity = warning

# SA1509: Opening braces should not be preceded by blank line
dotnet_diagnostic.SA1509.severity = warning

# SA1510: chained statement should not be preceded by a blank line
dotnet_diagnostic.SA1510.severity = warning

# SA1512: Single-line comments should not be followed by blank line
dotnet_diagnostic.SA1512.severity = warning

# SA1513: Closing brace should be followed by blank line
dotnet_diagnostic.SA1513.severity = warning

# SA1514: Element documentation header should be preceded by blank line
dotnet_diagnostic.SA1514.severity = warning

# SA1515: Single-line comment should be preceded by blank line
dotnet_diagnostic.SA1515.severity = warning

# SA1516: Elements should be separated by blank line
dotnet_diagnostic.SA1516.severity = warning

# SA1517: Code should not contain blank lines at start of file
dotnet_diagnostic.SA1517.severity = warning

# SA1518: Code should not contain blank lines at the end of the file
dotnet_diagnostic.SA1518.severity = warning

# SA1519: Braces should not be omitted from multi-line child statement
dotnet_diagnostic.SA1519.severity = warning

# SA1520: Use braces consistently
dotnet_diagnostic.SA1520.severity = warning

# SA1600: Elements should be documented
dotnet_diagnostic.SA1600.severity = none

# SA1601: Partial elements should be documented
dotnet_diagnostic.SA1601.severity = none

# SA1602: Enumeration items should be documented
dotnet_diagnostic.SA1602.severity = none

# SA1604: Element documentation should have summary
dotnet_diagnostic.SA1604.severity = none

# SA1605: Partial element documentation should have summary
dotnet_diagnostic.SA1605.severity = none

# SA1606: Element documentation should have summary text
dotnet_diagnostic.SA1606.severity = none

# SA1608: Element documentation should not have default summary
dotnet_diagnostic.SA1608.severity = none

# SA1610: Property documentation should have value text
dotnet_diagnostic.SA1610.severity = none

# SA1611: Element parameters must be documented
dotnet_diagnostic.SA1611.severity = none

# SA1612: The parameter documentation is at incorrect position
dotnet_diagnostic.SA1612.severity = none

# SA1613: Element parameter documentation must declare parameter name
dotnet_diagnostic.SA1613.severity = none

# SA1614: Element parameter documentation should have text
dotnet_diagnostic.SA1614.severity = none

# SA1615: Element return value should be documented
dotnet_diagnostic.SA1615.severity = none

# SA1616: Element return value documentation should have text
dotnet_diagnostic.SA1616.severity = none

# SA1618: The documentation for type parameter is missing
dotnet_diagnostic.SA1618.severity = none

# SA1619: The documentation for type parameter is missing
dotnet_diagnostic.SA1619.severity = none

# SA1622: Generic type parameter documentation should have text
dotnet_diagnostic.SA1622.severity = none

# SA1623: Property documentation text
dotnet_diagnostic.SA1623.severity = warning

# SA1624: Because the property only contains a visible get accessor, the documentation summary text should begin with 'Gets'
dotnet_diagnostic.SA1624.severity = warning

# SA1625: Element documentation should not be copied and pasted
dotnet_diagnostic.SA1625.severity = none

# SA1626: Single-line comments should not use documentation style slashes
dotnet_diagnostic.SA1626.severity = none

# SA1627: Documentation text should not be empty
dotnet_diagnostic.SA1627.severity = warning

# SA1629: Documentation text should end with a period
dotnet_diagnostic.SA1629.severity = warning

# SA1633: File should have header
dotnet_diagnostic.SA1633.severity = none

# SA1642: Constructor summary documentation should begin with standard text
dotnet_diagnostic.SA1642.severity = warning

# SA1643: Destructor summary documentation should begin with standard text
dotnet_diagnostic.SA1643.severity = warning

# SA1649: File name should match first type name
dotnet_diagnostic.SA1649.severity = warning

# S100: Methods and properties should be named in PascalCase
dotnet_diagnostic.S100.severity = warning

# S105: Tabulation characters should not be used
dotnet_diagnostic.S105.severity = warning

# S112: General exceptions should never be thrown
dotnet_diagnostic.S112.severity = none

# S113: Files should contain an empty newline at the end
dotnet_diagnostic.S113.severity = warning

# S121: Control structures should use curly braces
dotnet_diagnostic.S121.severity = warning

# S122: Statements should be on separate lines
dotnet_diagnostic.S122.severity = warning

# S126: "if ... else if" constructs should end with "else" clauses
dotnet_diagnostic.S126.severity = warning

# S131: "switch/Select" statements should contain a "default/Case Else" clauses
dotnet_diagnostic.S131.severity = warning

# S134: Control flow statements "if", "switch", "for", "foreach", "while", "do" and "try" should not be nested too deeply
dotnet_diagnostic.S134.severity = warning

# S881: Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression
dotnet_diagnostic.S881.severity = warning

# S1109: A close curly brace should be located at the beginning of a line
dotnet_diagnostic.S1109.severity = warning

# S1128: Unused "using" should be removed
dotnet_diagnostic.S1128.severity = warning

# S1135: Track uses of "TODO" tags
dotnet_diagnostic.S1135.severity = warning

# S1151: "switch case" clauses should not have too many lines of code
dotnet_diagnostic.S1151.severity = warning

# S1226: Method parameters, caught exceptions and foreach variables' initial values should not be ignored
dotnet_diagnostic.S1226.severity = warning

# S1309: Track uses of in-source issue suppressions
dotnet_diagnostic.S1309.severity = warning

# S1449: Culture should be specified for "string" operations
dotnet_diagnostic.S1449.severity = warning

# S1659: Multiple variables should not be declared on the same line
dotnet_diagnostic.S1659.severity = warning

# S1696: NullReferenceException should not be caught
dotnet_diagnostic.S1696.severity = warning

# S1858: "ToString()" calls should not be redundant
dotnet_diagnostic.S1858.severity = warning

# S1994: "for" loop increment clauses should modify the loops' counters
dotnet_diagnostic.S1994.severity = warning

# S2148: Underscores should be used to make large numbers readable
dotnet_diagnostic.S2148.severity = suggestion

# S2156: "sealed" classes should not have "protected" members
dotnet_diagnostic.S2156.severity = warning

# S2302: "nameof" should be used
dotnet_diagnostic.S2302.severity = warning

# S2327: "try" statements with identical "catch" and/or "finally" blocks should be merged
dotnet_diagnostic.S2327.severity = warning

# S2333: Redundant modifiers should not be used
dotnet_diagnostic.S2333.severity = warning

# S2357: Fields should be private
dotnet_diagnostic.S2357.severity = warning

# S2387: Child class fields should not shadow parent class fields
dotnet_diagnostic.S2387.severity = warning

# S2674: The length returned from a stream read should be checked
dotnet_diagnostic.S2674.severity = warning

# S2760: Sequential tests should not check the same condition
dotnet_diagnostic.S2760.severity = warning

# S2931: Classes with "IDisposable" members should implement "IDisposable"
dotnet_diagnostic.S2931.severity = warning

# S2952: Classes should "Dispose" of members from the classes' own "Dispose" methods
dotnet_diagnostic.S2952.severity = warning

# S3052: Members should not be initialized to default values
dotnet_diagnostic.S3052.severity = warning

# S3215: "interface" instances should not be cast to concrete types
dotnet_diagnostic.S3215.severity = warning

# S3235: Redundant parentheses should not be used
dotnet_diagnostic.S3235.severity = suggestion

# S3242: Method parameters should be declared with base types
dotnet_diagnostic.S3242.severity = none

# S3254: Default parameter values should not be passed as arguments
dotnet_diagnostic.S3254.severity = warning

# S3253: Constructor and destructor declarations should not be redundant
dotnet_diagnostic.S3253.severity = warning

# S3257: Declarations and initializations should be as concise as possible
dotnet_diagnostic.S3257.severity = suggestion

# S3267: Loops should be simplified with "LINQ" expressions
dotnet_diagnostic.S3267.severity = warning

# S3353: Unchanged local variables should be "const"
dotnet_diagnostic.S3353.severity = warning

# S3366: "this" should not be exposed from constructors
dotnet_diagnostic.S3366.severity = warning

# S3431: "[ExpectedException]" should not be used
dotnet_diagnostic.S3431.severity = warning

# S3441: Redundant property names should be omitted in anonymous classes
dotnet_diagnostic.S3441.severity = warning

# S3717: Track use of "NotImplementedException"
dotnet_diagnostic.S3717.severity = warning

# S3872: Parameter names should not duplicate the names of their methods
dotnet_diagnostic.S3872.severity = suggestion

# S3876: Strings or integral types should be used for indexers
dotnet_diagnostic.S3876.severity = warning

# S3898: Value types should implement "IEquatable<T>"
dotnet_diagnostic.S3898.severity = warning

# S3909: Collections should implement the generic interface
dotnet_diagnostic.S3909.severity = warning

# S3902: "Assembly.GetExecutingAssembly" should not be called
dotnet_diagnostic.S3902.severity = warning

# S3937: Number patterns should be regular
dotnet_diagnostic.S3937.severity = warning

# S3956: "Generic.List" instances should not be part of public APIs
dotnet_diagnostic.S3956.severity = warning

# S3962: "static readonly" constants should be "const" instead
dotnet_diagnostic.S3962.severity = warning

# S3967: Multidimensional arrays should not be used
dotnet_diagnostic.S3967.severity = warning

# S3993: Custom attributes should be marked with "System.AttributeUsageAttribute"
dotnet_diagnostic.S3993.severity = warning

# S4000: Pointers to unmanaged memory should not be visible
dotnet_diagnostic.S4000.severity = warning

# S4016: Enumeration members should not be named "Reserved"
dotnet_diagnostic.S4016.severity = warning

# S4017: Method signatures should not contain nested generic types
dotnet_diagnostic.S4017.severity = warning

# S4022: Enumerations should have "Int32" storage
dotnet_diagnostic.S4022.severity = warning

# S4025: Child class fields should not differ from parent class fields only by capitalization
dotnet_diagnostic.S4025.severity = warning

# S4026: Assemblies should be marked with "NeutralResourcesLanguageAttribute"
dotnet_diagnostic.S4026.severity = warning

# S4027: Exceptions should provide standard constructors
dotnet_diagnostic.S4027.severity = warning

# S4050: Operators should be overloaded consistently
dotnet_diagnostic.S4050.severity = warning

# S4052: Types should not extend outdated base types
dotnet_diagnostic.S4052.severity = warning

# S4056: Overloads with a "CultureInfo" or an "IFormatProvider" parameter should be used
dotnet_diagnostic.S4056.severity = warning

# S4058: Overloads with a "StringComparison" parameter should be used
dotnet_diagnostic.S4058.severity = warning

# S4060: Non-abstract attributes should be sealed
dotnet_diagnostic.S4060.severity = warning

# S4225: Extension methods should not extend "object"
dotnet_diagnostic.S4225.severity = warning

# S4226: Extensions should be in separate namespaces
dotnet_diagnostic.S4226.severity = warning

# S4261: Methods should be named according to their synchronicities
dotnet_diagnostic.S4261.severity = warning

# S4457: Parameter validation in "async"/"await" methods should be wrapped
dotnet_diagnostic.S4457.severity = none

# Default severity for analyzer diagnostics with category 'StyleCop.CSharp.DocumentationRules'
dotnet_analyzer_diagnostic.category-StyleCop.CSharp.DocumentationRules.severity = none

[test/**.cs]
# CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = none

[**/Program.cs]
# CA1812: Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = none # https://github.com/dotnet/roslyn-analyzers/issues/5628

# SA1516: Elements should be separated by blank line
dotnet_diagnostic.SA1516.severity = none # https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/3351
